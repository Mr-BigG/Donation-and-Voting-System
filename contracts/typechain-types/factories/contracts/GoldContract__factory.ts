/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  GoldContract,
  GoldContractInterface,
} from "../../contracts/GoldContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "initialUserGold",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getGold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getInitialUserGold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getWhetherUserCanGetInitialUserGold",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000d5538038062000d55833981016040819052620000349162000127565b8282600362000044838262000229565b50600462000053828262000229565b50505060055550620002f59050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008a57600080fd5b81516001600160401b0380821115620000a757620000a762000062565b604051601f8301601f19908116603f01168101908282118183101715620000d257620000d262000062565b81604052838152602092508683858801011115620000ef57600080fd5b600091505b83821015620001135785820183015181830184015290820190620000f4565b600093810190920192909252949350505050565b6000806000606084860312156200013d57600080fd5b83516001600160401b03808211156200015557600080fd5b620001638783880162000078565b945060208601519150808211156200017a57600080fd5b50620001898682870162000078565b925050604084015190509250925092565b600181811c90821680620001af57607f821691505b602082108103620001d057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200022457600081815260208120601f850160051c81016020861015620001ff5750805b601f850160051c820191505b8181101562000220578281556001016200020b565b5050505b505050565b81516001600160401b0381111562000245576200024562000062565b6200025d816200025684546200019a565b84620001d6565b602080601f8311600181146200029557600084156200027c5750858301515b600019600386901b1c1916600185901b17855562000220565b600085815260208120601f198616915b82811015620002c657888601518255948401946001909101908401620002a5565b5085821015620002e55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610a5080620003056000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a457c2d711610066578063a457c2d7146101ba578063a9059cbb146101cd578063dd62ed3e146101e0578063e1aa80bb146101f357600080fd5b806370a082311461018157806383b81fe1146101aa57806395d89b41146101b257600080fd5b806323b872dd116100c857806323b872dd14610142578063313ce56714610155578063395093511461016457806342f065321461017757600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f761020c565b604051610104919061089a565b60405180910390f35b61012061011b366004610904565b61029e565b6040519015158152602001610104565b6002545b604051908152602001610104565b61012061015036600461092e565b6102b8565b60405160128152602001610104565b610120610172366004610904565b6102dc565b61017f6102fe565b005b61013461018f36600461096a565b6001600160a01b031660009081526020819052604090205490565b600554610134565b6100f761038c565b6101206101c8366004610904565b61039b565b6101206101db366004610904565b610416565b6101346101ee36600461098c565b610424565b3360009081526006602052604090205460ff1615610120565b60606003805461021b906109bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610247906109bf565b80156102945780601f1061026957610100808354040283529160200191610294565b820191906000526020600020905b81548152906001019060200180831161027757829003601f168201915b5050505050905090565b6000336102ac81858561044f565b60019150505b92915050565b6000336102c6858285610573565b6102d18585856105ed565b506001949350505050565b6000336102ac8185856102ef8383610424565b6102f991906109f9565b61044f565b3360009081526006602052604090205460ff16156103635760405162461bcd60e51b815260206004820152601960248201527f596f75206861766520676f7420474f4c4420616c72656164790000000000000060448201526064015b60405180910390fd5b336000818152600660205260409020805460ff1916600117905560055461038a91906107bb565b565b60606004805461021b906109bf565b600033816103a98286610424565b9050838110156104095760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161035a565b6102d1828686840361044f565b6000336102ac8185856105ed565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104b15760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161035a565b6001600160a01b0382166105125760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161035a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061057f8484610424565b905060001981146105e757818110156105da5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161035a565b6105e7848484840361044f565b50505050565b6001600160a01b0383166106515760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161035a565b6001600160a01b0382166106b35760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161035a565b6001600160a01b0383166000908152602081905260409020548181101561072b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161035a565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906107629084906109f9565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107ae91815260200190565b60405180910390a36105e7565b6001600160a01b0382166108115760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161035a565b806002600082825461082391906109f9565b90915550506001600160a01b038216600090815260208190526040812080548392906108509084906109f9565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b818110156108c7578581018301518582016040015282016108ab565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146108ff57600080fd5b919050565b6000806040838503121561091757600080fd5b610920836108e8565b946020939093013593505050565b60008060006060848603121561094357600080fd5b61094c846108e8565b925061095a602085016108e8565b9150604084013590509250925092565b60006020828403121561097c57600080fd5b610985826108e8565b9392505050565b6000806040838503121561099f57600080fd5b6109a8836108e8565b91506109b6602084016108e8565b90509250929050565b600181811c908216806109d357607f821691505b6020821081036109f357634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102b257634e487b7160e01b600052601160045260246000fdfea26469706673582212204c547e18132d74994b8bf949099700769993eacf6619746430b3691c1193bfef64736f6c63430008110033";

type GoldContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GoldContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GoldContract__factory extends ContractFactory {
  constructor(...args: GoldContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    initialUserGold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GoldContract> {
    return super.deploy(
      name,
      symbol,
      initialUserGold,
      overrides || {}
    ) as Promise<GoldContract>;
  }
  override getDeployTransaction(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    initialUserGold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name,
      symbol,
      initialUserGold,
      overrides || {}
    );
  }
  override attach(address: string): GoldContract {
    return super.attach(address) as GoldContract;
  }
  override connect(signer: Signer): GoldContract__factory {
    return super.connect(signer) as GoldContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GoldContractInterface {
    return new utils.Interface(_abi) as GoldContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GoldContract {
    return new Contract(address, _abi, signerOrProvider) as GoldContract;
  }
}
