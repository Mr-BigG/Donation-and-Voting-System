/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DonationAndVotingSystemContractInterface
  extends utils.Interface {
  functions: {
    "addNewDonation(string,uint256,uint256)": FunctionFragment;
    "awards()": FunctionFragment;
    "getAward()": FunctionFragment;
    "getDonationIds()": FunctionFragment;
    "getDonationInformation(uint256,uint256)": FunctionFragment;
    "getDonationStatus(uint256,uint256)": FunctionFragment;
    "getDonationStatus(uint256)": FunctionFragment;
    "getDonationVotesInformation(uint256,uint256)": FunctionFragment;
    "getGoldConsumedByDonation()": FunctionFragment;
    "getGoldConsumedByVote()": FunctionFragment;
    "getGoldRewardFromDonationApproved(uint256)": FunctionFragment;
    "getMaxVotingTimes()": FunctionFragment;
    "getUserAddresses()": FunctionFragment;
    "getUserDonationIds()": FunctionFragment;
    "getUserVotesInformation()": FunctionFragment;
    "getWhetherUserCanGetAwardReward(uint256)": FunctionFragment;
    "getWhetherUserCanGetGoldReward(uint256,uint256)": FunctionFragment;
    "gold()": FunctionFragment;
    "voteOnDonation(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addNewDonation"
      | "awards"
      | "getAward"
      | "getDonationIds"
      | "getDonationInformation"
      | "getDonationStatus(uint256,uint256)"
      | "getDonationStatus(uint256)"
      | "getDonationVotesInformation"
      | "getGoldConsumedByDonation"
      | "getGoldConsumedByVote"
      | "getGoldRewardFromDonationApproved"
      | "getMaxVotingTimes"
      | "getUserAddresses"
      | "getUserDonationIds"
      | "getUserVotesInformation"
      | "getWhetherUserCanGetAwardReward"
      | "getWhetherUserCanGetGoldReward"
      | "gold"
      | "voteOnDonation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addNewDonation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "awards", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDonationIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonationInformation",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDonationStatus(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDonationStatus(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDonationVotesInformation",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGoldConsumedByDonation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGoldConsumedByVote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGoldRewardFromDonationApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxVotingTimes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDonationIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVotesInformation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWhetherUserCanGetAwardReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhetherUserCanGetGoldReward",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "gold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voteOnDonation",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNewDonation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "awards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDonationIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonationInformation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonationStatus(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonationStatus(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonationVotesInformation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGoldConsumedByDonation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGoldConsumedByVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGoldRewardFromDonationApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxVotingTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDonationIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVotesInformation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhetherUserCanGetAwardReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhetherUserCanGetGoldReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteOnDonation",
    data: BytesLike
  ): Result;

  events: {};
}

export interface DonationAndVotingSystemContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DonationAndVotingSystemContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNewDonation(
      content: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    awards(overrides?: CallOverrides): Promise<[string]>;

    getAward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDonationIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getDonationInformation(
      id: PromiseOrValue<BigNumberish>,
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber, BigNumber]>;

    "getDonationStatus(uint256,uint256)"(
      id: PromiseOrValue<BigNumberish>,
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getDonationStatus(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getDonationVotesInformation(
      id: PromiseOrValue<BigNumberish>,
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], string[]]>;

    getGoldConsumedByDonation(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGoldConsumedByVote(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGoldRewardFromDonationApproved(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMaxVotingTimes(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    getUserDonationIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getUserVotesInformation(
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

    getWhetherUserCanGetAwardReward(
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getWhetherUserCanGetGoldReward(
      id: PromiseOrValue<BigNumberish>,
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    gold(overrides?: CallOverrides): Promise<[string]>;

    voteOnDonation(
      userVote: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addNewDonation(
    content: PromiseOrValue<string>,
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  awards(overrides?: CallOverrides): Promise<string>;

  getAward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDonationIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getDonationInformation(
    id: PromiseOrValue<BigNumberish>,
    timeNow: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber, BigNumber, BigNumber]>;

  "getDonationStatus(uint256,uint256)"(
    id: PromiseOrValue<BigNumberish>,
    timeNow: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  "getDonationStatus(uint256)"(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getDonationVotesInformation(
    id: PromiseOrValue<BigNumberish>,
    timeNow: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[], string[]]>;

  getGoldConsumedByDonation(overrides?: CallOverrides): Promise<BigNumber>;

  getGoldConsumedByVote(overrides?: CallOverrides): Promise<BigNumber>;

  getGoldRewardFromDonationApproved(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMaxVotingTimes(overrides?: CallOverrides): Promise<BigNumber>;

  getUserAddresses(overrides?: CallOverrides): Promise<string[]>;

  getUserDonationIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getUserVotesInformation(
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

  getWhetherUserCanGetAwardReward(
    timeNow: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getWhetherUserCanGetGoldReward(
    id: PromiseOrValue<BigNumberish>,
    timeNow: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  gold(overrides?: CallOverrides): Promise<string>;

  voteOnDonation(
    userVote: PromiseOrValue<BigNumberish>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addNewDonation(
      content: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    awards(overrides?: CallOverrides): Promise<string>;

    getAward(overrides?: CallOverrides): Promise<void>;

    getDonationIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getDonationInformation(
      id: PromiseOrValue<BigNumberish>,
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber, BigNumber]>;

    "getDonationStatus(uint256,uint256)"(
      id: PromiseOrValue<BigNumberish>,
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    "getDonationStatus(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getDonationVotesInformation(
      id: PromiseOrValue<BigNumberish>,
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], string[]]>;

    getGoldConsumedByDonation(overrides?: CallOverrides): Promise<BigNumber>;

    getGoldConsumedByVote(overrides?: CallOverrides): Promise<BigNumber>;

    getGoldRewardFromDonationApproved(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMaxVotingTimes(overrides?: CallOverrides): Promise<BigNumber>;

    getUserAddresses(overrides?: CallOverrides): Promise<string[]>;

    getUserDonationIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getUserVotesInformation(
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

    getWhetherUserCanGetAwardReward(
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getWhetherUserCanGetGoldReward(
      id: PromiseOrValue<BigNumberish>,
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    gold(overrides?: CallOverrides): Promise<string>;

    voteOnDonation(
      userVote: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addNewDonation(
      content: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    awards(overrides?: CallOverrides): Promise<BigNumber>;

    getAward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDonationIds(overrides?: CallOverrides): Promise<BigNumber>;

    getDonationInformation(
      id: PromiseOrValue<BigNumberish>,
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDonationStatus(uint256,uint256)"(
      id: PromiseOrValue<BigNumberish>,
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDonationStatus(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDonationVotesInformation(
      id: PromiseOrValue<BigNumberish>,
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGoldConsumedByDonation(overrides?: CallOverrides): Promise<BigNumber>;

    getGoldConsumedByVote(overrides?: CallOverrides): Promise<BigNumber>;

    getGoldRewardFromDonationApproved(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMaxVotingTimes(overrides?: CallOverrides): Promise<BigNumber>;

    getUserAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getUserDonationIds(overrides?: CallOverrides): Promise<BigNumber>;

    getUserVotesInformation(overrides?: CallOverrides): Promise<BigNumber>;

    getWhetherUserCanGetAwardReward(
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhetherUserCanGetGoldReward(
      id: PromiseOrValue<BigNumberish>,
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gold(overrides?: CallOverrides): Promise<BigNumber>;

    voteOnDonation(
      userVote: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNewDonation(
      content: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    awards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDonationIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDonationInformation(
      id: PromiseOrValue<BigNumberish>,
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDonationStatus(uint256,uint256)"(
      id: PromiseOrValue<BigNumberish>,
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDonationStatus(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDonationVotesInformation(
      id: PromiseOrValue<BigNumberish>,
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGoldConsumedByDonation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGoldConsumedByVote(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGoldRewardFromDonationApproved(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMaxVotingTimes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserDonationIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserVotesInformation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhetherUserCanGetAwardReward(
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhetherUserCanGetGoldReward(
      id: PromiseOrValue<BigNumberish>,
      timeNow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteOnDonation(
      userVote: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
